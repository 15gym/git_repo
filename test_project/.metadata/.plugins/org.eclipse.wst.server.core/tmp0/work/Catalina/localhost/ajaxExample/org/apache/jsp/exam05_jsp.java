/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2018-09-05 05:30:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam05_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1535589035706L));
    _jspx_dependants.put("jar:file:/F:/java_web_4/jquery/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ajaxExample/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title></title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(" * {padding: 0; margin: 0; color:333;}\r\n");
      out.write(" #container { padding: 30px 20px;}\r\n");
      out.write(" ul { list-style: none;}\r\n");
      out.write(" h1 {\r\n");
      out.write("  font-size: large;\r\n");
      out.write("  border-left: 10px solid #7BAEB5;\r\n");
      out.write("  border-bottom: 1px solid #7BAEB5;\r\n");
      out.write("  padding: 10px;\r\n");
      out.write("  width: auto;\r\n");
      out.write(" }\r\n");
      out.write(" #comment_write {padding: 20px 15px; border-bottom: 1px solid #7BAEB5;}\r\n");
      out.write(" #comment_write label {\r\n");
      out.write("  display: inline-block; width: 80px;\r\n");
      out.write("  font-size: 14px; font-weight: bold;\r\n");
      out.write("  margin-bottom: 10px;\r\n");
      out.write(" }\r\n");
      out.write(" #comment_write input[type='text'], #comment_write textarea {\r\n");
      out.write("  border: 1px solid #ccc;\r\n");
      out.write("  vertical-align: middle;\r\n");
      out.write("  padding: 3px 10px;\r\n");
      out.write("  font-size: 12px;\r\n");
      out.write("  line-height: 150%;\r\n");
      out.write(" }\r\n");
      out.write(" #comment_write textarea {\r\n");
      out.write("  width: 380px; height: 90px;\r\n");
      out.write(" }\r\n");
      out.write(" .comment_item {\r\n");
      out.write("  font-size: 13px;\r\n");
      out.write("  color: #333;\r\n");
      out.write("  padding: 15px;\r\n");
      out.write("  border-bottom: 1px dotted #ccc;\r\n");
      out.write("  line-height: 150%\r\n");
      out.write(" }\r\n");
      out.write(" .comment_item .writer {color: #555; line-height: 200%$}\r\n");
      out.write(" .comment_item .writer input {vertical-align: middle;}\r\n");
      out.write(" .comment_item .writer .name {color: #222; font-weight: bold; font-size: 14px} \r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write(" /** 새로운 글을 화면에 추가하기 위한 함수\r\n");
      out.write("  *  - num: 글 번호\r\n");
      out.write("  *  - writer : 작성자 이름\r\n");
      out.write("  *  - contnet : 덧글 내용\r\n");
      out.write("  *  - datetime : 작성일시 */\r\n");
      out.write("  function addNewItem(num, writer, content, datetime) {\r\n");
      out.write("  // 새로운 글이 추가될 li태그 객체\r\n");
      out.write("  var new_li = $(\"<li>\");\r\n");
      out.write("  new_li.attr(\"data-num\", num);\r\n");
      out.write("  new_li.addClass(\"comment_item\");\r\n");
      out.write("  // 작성자 정보가 지정될 <p>태그\r\n");
      out.write("  var writer_p = $(\"<p>\");\r\n");
      out.write("  writer_p.addClass(\"writer\");\r\n");
      out.write("  // 작성자 정보의 이름\r\n");
      out.write("  var name_span = $(\"<span>\");\r\n");
      out.write("  name_span.addClass(\"name\");\r\n");
      out.write("  name_span.html(writer + \"님\");\r\n");
      out.write("  // 작성일시\r\n");
      out.write("  var date_span = $(\"<span>\");\r\n");
      out.write("  date_span.html(\" / \" + datetime + \" \")\r\n");
      out.write("  // 삭제하기 버튼\r\n");
      out.write("  var del_input = $(\"<input>\");\r\n");
      out.write("  del_input.attr({\"type\": \"button\", \"value\": \"삭제하기\"});\r\n");
      out.write("  del_input.addClass(\"delete_btn\");\r\n");
      out.write("  // 내용\r\n");
      out.write("  var content_p = $(\"<p>\");\r\n");
      out.write("  content_p.html(content);\r\n");
      out.write("  // 조립하기\r\n");
      out.write("  writer_p.append(name_span).append(date_span).append(del_input);\r\n");
      out.write("  new_li.append(writer_p).append(content_p);\r\n");
      out.write("  $(\"#comment_list\").append(new_li);\r\n");
      out.write(" }\r\n");
      out.write(" \r\n");
      out.write(" $(function() {\r\n");
      out.write("  /** 기본 덧글 목록 불러오기 */\r\n");
      out.write("  $.get(\"ajax/comment/comment_list.xml\", {}, function(data) {\r\n");
      out.write("   // 읽어들인 XML에서 \"item\"태그를 찾아 반복처리\r\n");
      out.write("   $(data).find(\"item\").each(function() {\r\n");
      out.write("    var num = $(this).find(\"num\").text();\r\n");
      out.write("    var writer = $(this).find(\"writer\").text();\r\n");
      out.write("    var content = $(this).find(\"content\").text();\r\n");
      out.write("    var datetime = $(this).find(\"datetime\").text();\r\n");
      out.write("    addNewItem(num, writer, content, datetime);\r\n");
      out.write("   });\r\n");
      out.write("  }).fail(function() {\r\n");
      out.write("   alert(\"덧글 목록을 불러오는데 실패하였습니다. 잠시후에 다시 시도해 주세요.\")\r\n");
      out.write("  });\r\n");
      out.write("  \r\n");
      out.write("  /** 덧글 내용 저장 이벤트 */\r\n");
      out.write("  $(\"#comment_form\").submit(function() {\r\n");
      out.write("   // 작성자 이름에 대한 입력여부 검사\r\n");
      out.write("   if(!$(\"#user_name\").val()) {\r\n");
      out.write("    alert(\"이름을 입력하세요.\");\r\n");
      out.write("    $(\"#user_name\").focus();\r\n");
      out.write("    return false;\r\n");
      out.write("   }\r\n");
      out.write("   // 내용에 대한 입력여부 검사\r\n");
      out.write("   if(!$(\"#comment\").val()) {\r\n");
      out.write("    alert(\"내용을 입력하세요.\");\r\n");
      out.write("    $(\"#comment\").focus();\r\n");
      out.write("    return false;\r\n");
      out.write("   }\r\n");
      out.write("   /** 덧글쓰기에 대한 JSP예시 */\r\n");
      out.write("   var url = \"ajax/comment/comment_write.jsp\";\r\n");
      out.write("   /** 글 저장을 위한 Post 방식의 Ajax 연동 처리 */\r\n");
      out.write("   $.post(url, $(this).serialize(), function(xml) {\r\n");
      out.write("    // XML에서 \"result\"태그의 값을 추출해서 식으로 변환 \r\n");
      out.write("    // --> true or false\r\n");
      out.write("    var result = eval($(xml).find(\"result\").text());\r\n");
      out.write("    // 결과가 저장 실패를 의미한다면 에러 메시지 출력 후, 처리 중단.\r\n");
      out.write("    if(!result) {\r\n");
      out.write("     alert($(xml).find(\"message\").text());\r\n");
      out.write("     return;\r\n");
      out.write("    }\r\n");
      out.write("    // 위의 if문을 지나친다면 저장 성공이므로, 저장된 결과를 추출\r\n");
      out.write("    var num = $(xml).find(\"num\").text();\r\n");
      out.write("    var writer = $(xml).find(\"writer\").text();\r\n");
      out.write("    var content = $(xml).find(\"content\").text();\r\n");
      out.write("    var datetime = $(xml).find(\"datetime\").text();\r\n");
      out.write("    // 저장 결과를 새로운 목록으로 출력하기 위해서 함수 호출\r\n");
      out.write("    addNewItem(num, writer, content, datetime);\r\n");
      out.write("   }).fail(function(){\r\n");
      out.write("    alert(\"덧글 작성에 실패했습니다. 잠시 후에 다시 시도해 주세요.\");\r\n");
      out.write("   });\r\n");
      out.write("   return false;\r\n");
      out.write("  });\r\n");
      out.write("  \r\n");
      out.write("  /** 삭제 버튼 클릭시에 항목 삭제하도록 \"미리\" 지정 */\r\n");
      out.write("  $(document).on(\"click\", \".delete_btn\", function() {\r\n");
      out.write("   if(confirm(\"정말 선택하신 항목을 삭제하시겠습니까?\")) {\r\n");
      out.write("    // 덧글 삭제를 가정한 JSP파일\r\n");
      out.write("    var url = \"ajax/comment/comment_delete.jsp\";\r\n");
      out.write("    // 글번호 얻기\r\n");
      out.write("    var num = $(this).parents(\"li\").attr(\"data-num\");\r\n");
      out.write("    // 삭제 제거 대상 \r\n");
      out.write("    // --> 클릭된 버튼을 기준으로 \"comment_item\"이라는 클래스를 갖는 상위 요소\r\n");
      out.write("    var target = $(this).parents(\".comment_item\");\r\n");
      out.write("    /** 글 번호를 통하여 삭제를 요청함 */\r\n");
      out.write("    $.post(url, {\"num\":num}, function(xml) {\r\n");
      out.write("     // XML에서 \"result\"태그의 값을 추출해 식으로 변환 --> true, false\r\n");
      out.write("     var result = eval($(xml).find(\"result\").text());\r\n");
      out.write("     // 결과 메시지\r\n");
      out.write("     var message = $(xml).find(\"message\").text();\r\n");
      out.write("     // 메시지 출력\r\n");
      out.write("     alert(message);\r\n");
      out.write("     // 삭제 성공을 의미할 경우, 삭제 대상 요소를 화면에서 제거\r\n");
      out.write("     if(result) {\r\n");
      out.write("      target.remove();\r\n");
      out.write("     }\r\n");
      out.write("    }).fail(function() {\r\n");
      out.write("     alert(\"덧글 삭제에 실패했습니다. 잠시 후에 다시 시도해 주세요.\");\r\n");
      out.write("    });\r\n");
      out.write("   }\r\n");
      out.write("  });\r\n");
      out.write(" });\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write(" <h1>jQuery Comment</h1>\r\n");
      out.write(" <div id=\"comment_write\">\r\n");
      out.write("  <form action=\"\" id=\"comment_form\">\r\n");
      out.write("   <div>\r\n");
      out.write("    <label for=\"user_name\">작성자</label>\r\n");
      out.write("    <input type=\"text\" name=\"user_name\" id=\"user_name\">\r\n");
      out.write("    <input type=\"submit\" value=\"저장하기\">\r\n");
      out.write("   </div>\r\n");
      out.write("   <div>\r\n");
      out.write("    <label for=\"comment\">덧글 내용</label>\r\n");
      out.write("    <textarea name=\"comment\" id=\"comment\"></textarea>\r\n");
      out.write("   </div>\r\n");
      out.write("  </form> \r\n");
      out.write(" </div>\r\n");
      out.write(" <ul id=\"comment_list\">\r\n");
      out.write("  <!-- 여기에 동적 생성 요소가 들어가게 됩니다. -->\r\n");
      out.write(" </ul>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
